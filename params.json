{"name":"Latlon23","tagline":"Methods for representing geographic coordinates","body":"\r\nLatLon\r\n======\r\n\r\nLicense / Fork Information\r\n--------------------------\r\n\r\n::\r\n\r\n    Copyright (c) 2014-2015 Gen Del Raye\r\n    Copyright (c) 2015 Ryan Vennell\r\n\r\n    This is a derivative, forked from the original work by:\r\n    Gen Del Raye <gdelraye@hawaii.edu> and located at:\r\n    https://pypi.python.org/pypi/LatLon\r\n\r\n    Licensed under the GPLv3: http://www.gnu.org/licenses/gpl-3.0.html\r\n\r\n    The purpose of this fork is to provide full Python3 (and Python2)\r\n    support in light of the fact that the original work has no public\r\n    repository which can be contributed to or traditionally forked.\r\n\r\nFeatures\r\n--------\r\nMethods for representing geographic coordinates (latitude and longitude) including the ability to:\r\n\r\n    * Convert lat/lon strings from almost any format into a *LatLon* object (analogous to the datetime\r\n      library's *stptime* method)\r\n    * Automatically store decimal degrees, decimal minutes, and degree, minute, second information in\r\n      a *LatLon* object\r\n    * Output lat/lon information into a formatted string (analogous to the datetime library's *strftime*\r\n      method)\r\n    * Project lat/lon coordinates into some other proj projection\r\n    * Calculate distance and heading between lat/lon pairs using either the FAI or WGS84 approximation\r\n    * Create a new *LatLon* object by offsetting an initial coordinate by a distance and heading\r\n    * Subtracting one *LatLon* object from another creates a *GeoVector* object with distance and heading\r\n      attributes (analogous to the datetime library's *timedelta* object)\r\n    * Adding or subtracting a *Latlon* object and a *GeoVector* object creates a new *LatLon* object with\r\n      the coordinates adjusted by the *GeoVector* object's distance and heading\r\n    * *GeoVector* objects can be added, subtracted, multiplied or divided\r\n\r\nInstallation\r\n------------\r\n*LatLon* has only been tested in Python 2.7\r\n\r\nInstallation through pip::\r\n\r\n    $ pip install LatLon23\r\n\r\nInstallation through pip::\r\n\r\n    $ pip3 install LatLon23\r\n\r\nRequires the following non-standard libraries:\r\n\r\n    * *pyproj*\r\n\r\nUsage Notes\r\n-----------\r\nUsage of *LatLon* is primarily through the class *LatLon*, which is designed to hold a single pair of\r\n*Latitude* and *Longitude* objects. Strings can be converted to *LatLon* objects using the method\r\n*string2latlon*, and to *Latitude* or *Longitude* objects using *string2geocoord*. Alternatively, a LatLon\r\nobject can be constructed by subtracting two *LatLon* objects, or adding or subtracting a *Latlon* object\r\nand a *GeoVector* object.\r\n\r\nLatitude or Longitude Construction\r\n==================================\r\nLatitude of longitude construction is through the classes *Latitude* and *Longitude*, respectively. You can\r\npass a latitude or longitude coordinate in any combination of decimal degrees, degrees and minutes, or\r\ndegrees minutes and seconds. Alternatively, you can pass a formatted string using the function *string2geocoord*\r\nfor a string containing a single latitude or longitude, or *string2latlon* for a pair of strings representing\r\nthe latitude and longitude.\r\n\r\nString formatting:\r\n==================\r\n*string2latlon* and *string2geocoord* both take a *formatter* string which is loosely modeled on the *format*\r\nkeyword used in *datetime's* *strftime* function. Indicator characters (e.g. *H* or *D*) are placed between\r\na specific separator character (*%*) to specify the way in which a coordinate string is formatted. Possible\r\nvalues are as follows:\r\n\r\n::\r\n\r\n    *H* is a hemisphere identifier (e.g. N, S, E or W)\r\n\r\n    *D* is a coordinate in decimal degrees notation (e.g. 5.833)\r\n\r\n    *d* is a coordinate in degrees notation (e.g. 5)\r\n\r\n    *M* is a coordinate in decimal minutes notation (e.g. 54.35)\r\n\r\n    *m* is a coordinate in minutes notation (e.g. 54)\r\n\r\n    *S* is a coordinate in seconds notation (e.g. 28.93)\r\n\r\n    Any other characters (e.g. ' ' or ', ') will be treated as a separator between the above components.\r\n\r\n    All components should be separated by the *%* character. For example, if the coord_str is '5, 52,\r\n    59.88_N', the format_str would be 'd%, %m%, %S%_%H'\r\n\r\n*Important*\r\n===========\r\nOne format that will not currently work is one where the hemisphere identifier and a degree or decimal degree\r\nare not separated by any characters. For example  '5 52 59.88 N' is valid whereas '5 52 59.88N' is not.\r\n\r\nString output:\r\n==============\r\nBoth *LatLon* and *Latitude* and *Longitude* objects include a *to_string()* method for outputting a formatted\r\ncoordinate.\r\n\r\nProjection:\r\n===========\r\nUse *LatLon.project* to transform geographical coordinates into a chosen projection. Requires that you pass it a\r\n*pyproj* or *basemap* projection.\r\n\r\nDistance and Heading Calculation:\r\n=================================\r\n*LatLon* objects have a *distance()* method which accepts a 2nd *LatLon* object as an argument. *distance()* will\r\ncalculate the great-circle distance between the two coordinates using the WGS84 ellipsoid by default. To use the\r\nmore approximate FAI sphere, set *ellipse* to 'sphere'. Initial and reverse headings (in degrees) can be calculated\r\nin a similar way using the *heading_initial()* and *heading_reverse()* methods. Alternatively, subtracting one\r\n*LatLon* object from another will return a *GeoVector* object with the attributes heading and distance.\r\n\r\nCreating a New LatLon Object by Offset from Another One:\r\n========================================================\r\nUse the *offset()* method of *LatLon* objects, which takes an initial heading (in degrees) and distance (in km) to\r\nreturn a new *LatLon* object at the offset coordinates. Also, you can perform the same operation by adding or\r\nsubtracting a LatLon object with a GeoVector object.\r\n\r\nExamples\r\n--------\r\nCreate a *LatLon* object from coordinates::\r\n\r\n    >> palmyra = LatLon(Latitude(5.8833), Longitude(-162.0833)) # Location of Palmyra Atoll in decimal degrees\r\n    >> palmyra = LatLon(5.8833, -162.0833) # Same thing but simpler!\r\n    >> palmyra = LatLon(Latitude(degree = 5, minute = 52, second = 59.88),\r\n    >>                  Longitude(degree = -162, minute = -4.998) # or more complicated!\r\n    >> print palmyra.to_string('d% %m% %S% %H') # Print coordinates to degree minute second\r\n    ('5 52 59.88 N', '162 4 59.88 W')\r\n\r\nCreate a *Latlon* object from a formatted string::\r\n\r\n    >> palmyra = string2latlon('5 52 59.88 N', '162 4 59.88 W', 'd% %m% %S% %H')\r\n    >> print palmyra.to_string('d%_%M') # Print coordinates as degree minutes separated by underscore\r\n    ('5_52.998', '-162_4.998')\r\n\r\nPerform some calculations::\r\n\r\n    >> palmyra = LatLon(Latitude(5.8833), Longitude(-162.0833)) # Location of Palmyra Atoll\r\n    >> honolulu = LatLon(Latitude(21.3), Longitude(-157.8167)) # Location of Honolulu, HI\r\n    >> distance = palmyra.distance(honolulu) # WGS84 distance in km\r\n    >> print distance\r\n    1766.69130376\r\n    >> print palmyra.distance(honolulu, ellipse = 'sphere') # FAI distance in km\r\n    1774.77188181\r\n    >> initial_heading = palmyra.heading_initial(honolulu) # Heading from Palmyra to Honolulu on WGS84 ellipsoid\r\n    >> print initial_heading\r\n    14.6907922022\r\n    >> hnl = palmyra.offset(initial_heading, distance) # Reconstruct Honolulu based on offset from Palmyra\r\n    >> print hnl.to_string('D') # Coordinates of Honolulu\r\n    ('21.3', '-157.8167')\r\n\r\nManipulate *LatLon* objects using *GeoVectors*::\r\n\r\n    >> vector = (honolulu - palmyra) * 2 # A GeoVector with 2x the magnitude of a vector from palmyra to honolulu\r\n    >> print vector # Print heading and magnitude\r\n    14.6907922022 3533.38260751\r\n    print palmyra + (vector/2.0) # Recreate the coordinates of Honolulu by adding half of vector to palmyra\r\n    21.3, -157.8167\r\n\r\nVersion\r\n-------\r\n\r\nChangelog\r\n=========\r\n**1.0.7 (MARCH/29/2015)**\r\n\r\n    * Forked from original work: https://pypi.python.org/pypi/LatLon\r\n    * Added Python3 support and refactored a bit of the code\r\n    * Updated Readme to correct issues and provide proper attribution\r\n    * Adding MANIFEST.in","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}